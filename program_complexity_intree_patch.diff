diff --git a/llvm/include/llvm/Analysis/ProgramComplexity.h b/llvm/include/llvm/Analysis/ProgramComplexity.h
new file mode 100644
index 000000000000..bd2b3df140b7
--- /dev/null
+++ b/llvm/include/llvm/Analysis/ProgramComplexity.h
@@ -0,0 +1,46 @@
+
+#ifndef LLVM_ANALYSIS_PROGRAMCOMPLEXITY_H
+#define LLVM_ANALYSIS_PROGRAMCOMPLEXITY_H
+
+#include "llvm/IR/PassManager.h"
+#include "llvm/Analysis/TargetTransformInfo.h"
+
+namespace llvm {
+
+class ScalarEvolution;
+
+namespace json {
+  class Object;
+}
+
+class ProgramComplexity : public AnalysisInfoMixin<ProgramComplexity> {
+  friend AnalysisInfoMixin<ProgramComplexity>;
+  static AnalysisKey Key;
+
+  TargetTransformInfo::TargetCostKind TargetCostKind = TargetTransformInfo::TCK_RecipThroughput;
+
+public:
+  typedef json::Object Result;
+
+  Result run(Module &M, ModuleAnalysisManager &AM);
+
+private:
+
+  json::Object handleLoop(const Loop &L, ScalarEvolution &SE, TargetTransformInfo &TTI);
+  json::Object handleBranchBB(BasicBlock &BB, TargetTransformInfo &TTI);
+  json::Object handleBB(BasicBlock &BB, TargetTransformInfo &TTI);
+};
+
+/// Printer pass for the \c ProgramComplexity results.
+class ProgramComplexityPrinterPass : public PassInfoMixin<ProgramComplexityPrinterPass> {
+  raw_ostream &OS;
+
+public:
+  explicit ProgramComplexityPrinterPass(raw_ostream &OS) : OS(OS) {}
+
+  PreservedAnalyses run(Module &M, ModuleAnalysisManager &AM);
+};
+
+}
+
+#endif // LLVM_ANALYSIS_PROGRAMCOMPLEXITY_H
\ No newline at end of file
diff --git a/llvm/lib/Analysis/CMakeLists.txt b/llvm/lib/Analysis/CMakeLists.txt
index 9d8c9cfda66c..67747dc0fff0 100644
--- a/llvm/lib/Analysis/CMakeLists.txt
+++ b/llvm/lib/Analysis/CMakeLists.txt
@@ -113,6 +113,7 @@ add_llvm_component_library(LLVMAnalysis
   PhiValues.cpp
   PostDominators.cpp
   ProfileSummaryInfo.cpp
+  ProgramComplexity.cpp
   PtrUseVisitor.cpp
   RegionInfo.cpp
   RegionPass.cpp
diff --git a/llvm/lib/Analysis/ProgramComplexity.cpp b/llvm/lib/Analysis/ProgramComplexity.cpp
new file mode 100644
index 000000000000..44b70111d8a3
--- /dev/null
+++ b/llvm/lib/Analysis/ProgramComplexity.cpp
@@ -0,0 +1,309 @@
+
+#include "llvm/Analysis/ProgramComplexity.h"
+#include "llvm/ADT/DepthFirstIterator.h"
+#include "llvm/Analysis/LoopInfo.h"
+#include "llvm/Analysis/ScalarEvolution.h"
+#include "llvm/Analysis/TargetTransformInfo.h"
+#include "llvm/IR/InstIterator.h"
+#include "llvm/IR/Instruction.h"
+#include "llvm/IR/IntrinsicInst.h"
+#include "llvm/Support/Debug.h"
+#include "llvm/Support/JSON.h"
+
+using namespace llvm;
+
+#define DEBUG_TYPE "program-complexity"
+
+AnalysisKey ProgramComplexity::Key;
+
+ProgramComplexity::Result ProgramComplexity::run(Module &M,
+                                                 ModuleAnalysisManager &AM) {
+
+  json::Object mJson;
+
+  json::Array functions;
+  for (Function &F : M) {
+    // Get required analysis
+    FunctionAnalysisManager &FAM =
+        AM.getResult<FunctionAnalysisManagerModuleProxy>(M).getManager();
+    ScalarEvolution &SE = FAM.getResult<ScalarEvolutionAnalysis>(F);
+    TargetTransformInfo &TTI = FAM.getResult<TargetIRAnalysis>(F);
+    auto &LI = FAM.getResult<LoopAnalysis>(F);
+
+    json::Object functionJson;
+    functionJson["name"] = F.getName();
+    functionJson["type"] = "function";
+
+    /*
+    dbgs() << "Classifying expressions for: ";
+    F.printAsOperand(dbgs(), false);
+    dbgs() << "\n";
+    for (Instruction &I : instructions(F)) {
+      if (I.getType()->isIntOrPtrTy() && !isa<CmpInst>(I)) {
+        dbgs() << I << '\n';
+        dbgs() << "  -->  ";
+        const SCEV *SV = SE.getSCEV(&I);
+        SV->print(dbgs());
+        if (!isa<SCEVCouldNotCompute>(SV)) {
+          dbgs() << " U: ";
+          SE.getUnsignedRange(SV).print(dbgs());
+          dbgs() << " S: ";
+          SE.getSignedRange(SV).print(dbgs());
+        }
+
+        const Loop *L = LI.getLoopFor(I.getParent());
+
+        const SCEV *AtUse = SE.getSCEVAtScope(SV, L);
+        if (AtUse != SV) {
+          dbgs() << "  -->  ";
+          AtUse->print(dbgs());
+          if (!isa<SCEVCouldNotCompute>(AtUse)) {
+            dbgs() << " U: ";
+            SE.getUnsignedRange(AtUse).print(dbgs());
+            dbgs() << " S: ";
+            SE.getSignedRange(AtUse).print(dbgs());
+          }
+        }
+
+        if (L) {
+          dbgs() << "\t\t" "Exits: ";
+          const SCEV *ExitValue = SE.getSCEVAtScope(SV, L->getParentLoop());
+          if (!SE.isLoopInvariant(ExitValue, L)) {
+            dbgs() << "<<Unknown>>";
+          } else {
+            dbgs() << *ExitValue;
+          }
+
+          bool First = true;
+          for (const auto *Iter = L; Iter; Iter = Iter->getParentLoop()) {
+            if (First) {
+              dbgs() << "\t\t" "LoopDispositions: { ";
+              First = false;
+            } else {
+              dbgs() << ", ";
+            }
+
+            Iter->getHeader()->printAsOperand(dbgs(), false);
+            dbgs() << ": " << SE.getLoopDisposition(SV, Iter);
+          }
+
+          for (const auto *InnerL : depth_first(L)) {
+            if (InnerL == L)
+              continue;
+            if (First) {
+              dbgs() << "\t\t" "LoopDispositions: { ";
+              First = false;
+            } else {
+              dbgs() << ", ";
+            }
+
+            InnerL->getHeader()->printAsOperand(dbgs(), false);
+            dbgs() << ": " << SE.getLoopDisposition(SV, InnerL);
+          }
+
+          dbgs() << " }";
+        }
+
+        dbgs() << "\n";
+      }
+    }
+    */
+
+    // Handle loops
+    json::Array loopsJsonArray;
+    for (Loop *loop : LI.getTopLevelLoops()) {
+      // iterating top loops
+      loopsJsonArray.push_back(std::move(handleLoop(*loop, SE, TTI)));
+    }
+    functionJson["loops"] = json::Value(std::move(loopsJsonArray));
+
+    // Handle free BBs
+    json::Array freeBBsJsonArray;
+    bool skip = false;
+    for (BasicBlock &BB : F) {
+      // Skip blocks belonging to a loop
+      for (Loop *L : LI) {
+        if (L->contains(&BB)) {
+          LLVM_DEBUG(dbgs() << "Ignoring bb: " << BB.getName()
+                 << ",as it is part of loop: " << L->getName() << "\n");
+          skip = true;
+        }
+      }
+      if (skip == true) {
+        skip = false;
+        continue;
+      }
+
+      // Handle blocks with branch
+      if (BB.getTerminator()->getNumSuccessors() > 1) {
+        // TODO: make a list of handled bbs, to not iterate them again ?
+      }
+
+      freeBBsJsonArray.push_back(std::move(handleBB(BB, TTI)));
+    }
+
+    functionJson["basic blocks"] = json::Value(std::move(freeBBsJsonArray));
+    functions.push_back(std::move(functionJson));
+  }
+
+  mJson["program"] = json::Value(std::move(functions));
+  return mJson;
+}
+
+json::Object ProgramComplexity::handleLoop(const Loop &L, ScalarEvolution &SE, TargetTransformInfo &TTI) {
+  StringRef loopName = L.getName();
+  dbgs() << "Handling loop: " << loopName << ", header: ";
+  L.getHeader()->printAsOperand(dbgs(), /*PrintType=*/false);
+  dbgs() << "\n";
+
+  json::Object loopJson;
+  loopJson["name"] = loopName;
+  loopJson["type"] = "loop";
+
+  if (!L.isInnermost()) {
+    // TODO: implement this
+    // handle subloops
+    for (Loop *subLoop : L.getSubLoops()) {
+      handleLoop(*subLoop, SE, TTI);
+    }
+  }
+
+  // determine num of loop iterations (also based on runtime variables)
+  // code taken from ScalarEvolution.cpp PrintLoopInfo
+  /*
+  SmallVector<BasicBlock *, 8> ExitingBlocks;
+  L.getExitingBlocks(ExitingBlocks);
+  if (ExitingBlocks.size() != 1)
+    dbgs() << "<multiple exits> ";
+  */
+
+  if (SE.hasLoopInvariantBackedgeTakenCount(&L)) {
+    const SCEV *backedgeTakenCount = SE.getBackedgeTakenCount(&L);
+    dbgs() << "backedge-taken count is " << *backedgeTakenCount << "\n";
+
+    std::string str;
+    raw_string_ostream output(str);
+    output << *backedgeTakenCount;
+    loopJson["iterations"] = str;
+  } else {
+    dbgs() << "backedge-taken count is undef\n";
+    loopJson["iterations"] = "Undef";
+  }
+
+  /*
+  if (ExitingBlocks.size() > 1)
+    for (BasicBlock *ExitingBlock : ExitingBlocks) {
+      dbgs() << "  exit count for " << ExitingBlock->getName() << ": "
+        << *SE.getExitCount(&L, ExitingBlock) << "\n";
+    }
+
+  dbgs() << "Loop ";
+  L.getHeader()->printAsOperand(dbgs(), PrintType=false);
+  dbgs() << ": ";
+
+  auto *ConstantBTC = SE.getConstantMaxBackedgeTakenCount(&L);
+  if (!isa<SCEVCouldNotCompute>(ConstantBTC)) {
+    dbgs() << "constant max backedge-taken count is " << *ConstantBTC;
+    if (SE.isBackedgeTakenCountMaxOrZero(&L))
+      dbgs() << ", actual taken count either this or zero.";
+  } else {
+    dbgs() << "Unpredictable constant max backedge-taken count. ";
+  }
+
+  dbgs() << "\n"
+        "Loop ";
+  L.getHeader()->printAsOperand(dbgs(), PrintType=false);
+  dbgs() << ": ";
+
+  auto *SymbolicBTC = SE.getSymbolicMaxBackedgeTakenCount(&L);
+  if (!isa<SCEVCouldNotCompute>(SymbolicBTC)) {
+    dbgs() << "symbolic max backedge-taken count is " << *SymbolicBTC;
+    if (SE.isBackedgeTakenCountMaxOrZero(&L))
+      dbgs() << ", actual taken count either this or zero.";
+  } else {
+    dbgs() << "Unpredictable symbolic max backedge-taken count. ";
+  }
+  dbgs() << "\n";
+  */
+
+  // Go through basic blocks in loop
+  json::Array loopBasicBlockJsonArray;
+  dbgs() << "Handling BBs in loop: " << loopName;
+  for (BasicBlock *BB : L.getBlocks()) {
+    loopBasicBlockJsonArray.push_back(std::move(handleBB(*BB, TTI)));
+  }
+  loopJson["basic blocks"] = std::move(loopBasicBlockJsonArray);
+
+  return loopJson;
+}
+
+
+json::Object ProgramComplexity::handleBranchBB(BasicBlock &BB, TargetTransformInfo &TTI) {
+  StringRef bbName = BB.getName();
+  dbgs() << "Handling branch BB: " << bbName;
+
+  json::Object bbJson;
+  bbJson["name"] = bbName;
+
+
+
+  return bbJson;
+}
+
+
+json::Object ProgramComplexity::handleBB(BasicBlock &BB, TargetTransformInfo &TTI) {
+  StringRef bbName = BB.getName();
+  dbgs() << "Handling BB: " << bbName;
+
+  json::Object bbJson;
+  bbJson["name"] = bbName;
+
+  // TODO: Maybe to optimize code it is possible to check for InstructionCost
+  // validity (.IsValid()), when getting single values and stopping BB
+  // evaluation on invalid cost
+
+  InstructionCost totalCost;
+
+  for (Instruction &Inst : BB) {
+    // TODO: Use a pass parameter instead of cl::opt CostKind to determine
+    // which cost kind to print.
+    InstructionCost Cost;
+    auto *II = dyn_cast<IntrinsicInst>(&Inst);
+    if (II /*&& TypeBasedIntrinsicCost*/) { // TODO: handle this option?
+                                            // Example:
+                                            // CostModelPrinterPass::run(
+      IntrinsicCostAttributes ICA(II->getIntrinsicID(), *II,
+                                  InstructionCost::getInvalid(), true);
+      Cost = TTI.getIntrinsicInstrCost(ICA, TargetCostKind);
+    } else {
+      Cost = TTI.getInstructionCost(&Inst, TargetCostKind);
+    }
+
+    totalCost += Cost;
+
+    dbgs() << "Estimated cost of inst: " << Inst.getName() << " is: ";
+    if (auto CostVal = Cost.getValue())
+      dbgs() << *CostVal;
+    else
+      dbgs() << "Undef";
+    dbgs() << "\n";
+  }
+
+  if (std::optional<InstructionCost::CostType> CostVal = totalCost.getValue()) {
+    bbJson["cost"] = std::move(*CostVal); //*CostVal;
+  } else {
+    bbJson["cost"] = "Undef";
+  }
+
+  return bbJson;
+}
+
+PreservedAnalyses ProgramComplexityPrinterPass::run(Module &M,
+                                                    ModuleAnalysisManager &AM) {
+  json::Object result = AM.getResult<ProgramComplexity>(M);
+
+  json::OStream JOS(OS, /*PrettyPrint*/ 2);
+  JOS.value(std::move(result));
+  OS << '\n';
+  return PreservedAnalyses::all();
+}
diff --git a/llvm/lib/Passes/PassBuilder.cpp b/llvm/lib/Passes/PassBuilder.cpp
index fde759026e5d..3016d7f2ebeb 100644
--- a/llvm/lib/Passes/PassBuilder.cpp
+++ b/llvm/lib/Passes/PassBuilder.cpp
@@ -61,6 +61,7 @@
 #include "llvm/Analysis/PhiValues.h"
 #include "llvm/Analysis/PostDominators.h"
 #include "llvm/Analysis/ProfileSummaryInfo.h"
+#include "llvm/Analysis/ProgramComplexity.h"
 #include "llvm/Analysis/RegionInfo.h"
 #include "llvm/Analysis/ScalarEvolution.h"
 #include "llvm/Analysis/ScalarEvolutionAliasAnalysis.h"
diff --git a/llvm/lib/Passes/PassRegistry.def b/llvm/lib/Passes/PassRegistry.def
index 91782d661ddd..ddfeef40ce61 100644
--- a/llvm/lib/Passes/PassRegistry.def
+++ b/llvm/lib/Passes/PassRegistry.def
@@ -23,6 +23,7 @@ MODULE_ANALYSIS("lcg", LazyCallGraphAnalysis())
 MODULE_ANALYSIS("module-summary", ModuleSummaryIndexAnalysis())
 MODULE_ANALYSIS("no-op-module", NoOpModuleAnalysis())
 MODULE_ANALYSIS("profile-summary", ProfileSummaryAnalysis())
+MODULE_ANALYSIS("program-complexity", ProgramComplexity())
 MODULE_ANALYSIS("stack-safety", StackSafetyGlobalAnalysis())
 MODULE_ANALYSIS("verify", VerifierAnalysis())
 MODULE_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
@@ -96,6 +97,7 @@ MODULE_PASS("pgo-icall-prom", PGOIndirectCallPromotion())
 MODULE_PASS("pgo-instr-gen", PGOInstrumentationGen())
 MODULE_PASS("pgo-instr-use", PGOInstrumentationUse())
 MODULE_PASS("print-profile-summary", ProfileSummaryPrinterPass(dbgs()))
+MODULE_PASS("print-program-complexity", ProgramComplexityPrinterPass(dbgs()))
 MODULE_PASS("print-callgraph", CallGraphPrinterPass(dbgs()))
 MODULE_PASS("print-callgraph-sccs", CallGraphSCCsPrinterPass(dbgs()))
 MODULE_PASS("print", PrintModulePass(dbgs()))
diff --git a/program_complexity_intree_patch.diff b/program_complexity_intree_patch.diff
new file mode 100644
index 000000000000..aa3cc9bb66c0
--- /dev/null
+++ b/program_complexity_intree_patch.diff
@@ -0,0 +1,391 @@
+diff --git a/llvm/include/llvm/Analysis/ProgramComplexity.h b/llvm/include/llvm/Analysis/ProgramComplexity.h
+new file mode 100644
+index 000000000000..bd2b3df140b7
+--- /dev/null
++++ b/llvm/include/llvm/Analysis/ProgramComplexity.h
+@@ -0,0 +1,46 @@
++
++#ifndef LLVM_ANALYSIS_PROGRAMCOMPLEXITY_H
++#define LLVM_ANALYSIS_PROGRAMCOMPLEXITY_H
++
++#include "llvm/IR/PassManager.h"
++#include "llvm/Analysis/TargetTransformInfo.h"
++
++namespace llvm {
++
++class ScalarEvolution;
++
++namespace json {
++  class Object;
++}
++
++class ProgramComplexity : public AnalysisInfoMixin<ProgramComplexity> {
++  friend AnalysisInfoMixin<ProgramComplexity>;
++  static AnalysisKey Key;
++
++  TargetTransformInfo::TargetCostKind TargetCostKind = TargetTransformInfo::TCK_RecipThroughput;
++
++public:
++  typedef json::Object Result;
++
++  Result run(Module &M, ModuleAnalysisManager &AM);
++
++private:
++
++  json::Object handleLoop(const Loop &L, ScalarEvolution &SE, TargetTransformInfo &TTI);
++  json::Object handleBranchBB(BasicBlock &BB, TargetTransformInfo &TTI);
++  json::Object handleBB(BasicBlock &BB, TargetTransformInfo &TTI);
++};
++
++/// Printer pass for the \c ProgramComplexity results.
++class ProgramComplexityPrinterPass : public PassInfoMixin<ProgramComplexityPrinterPass> {
++  raw_ostream &OS;
++
++public:
++  explicit ProgramComplexityPrinterPass(raw_ostream &OS) : OS(OS) {}
++
++  PreservedAnalyses run(Module &M, ModuleAnalysisManager &AM);
++};
++
++}
++
++#endif // LLVM_ANALYSIS_PROGRAMCOMPLEXITY_H
+\ No newline at end of file
+diff --git a/llvm/lib/Analysis/CMakeLists.txt b/llvm/lib/Analysis/CMakeLists.txt
+index 9d8c9cfda66c..67747dc0fff0 100644
+--- a/llvm/lib/Analysis/CMakeLists.txt
++++ b/llvm/lib/Analysis/CMakeLists.txt
+@@ -113,6 +113,7 @@ add_llvm_component_library(LLVMAnalysis
+   PhiValues.cpp
+   PostDominators.cpp
+   ProfileSummaryInfo.cpp
++  ProgramComplexity.cpp
+   PtrUseVisitor.cpp
+   RegionInfo.cpp
+   RegionPass.cpp
+diff --git a/llvm/lib/Analysis/ProgramComplexity.cpp b/llvm/lib/Analysis/ProgramComplexity.cpp
+new file mode 100644
+index 000000000000..44b70111d8a3
+--- /dev/null
++++ b/llvm/lib/Analysis/ProgramComplexity.cpp
+@@ -0,0 +1,309 @@
++
++#include "llvm/Analysis/ProgramComplexity.h"
++#include "llvm/ADT/DepthFirstIterator.h"
++#include "llvm/Analysis/LoopInfo.h"
++#include "llvm/Analysis/ScalarEvolution.h"
++#include "llvm/Analysis/TargetTransformInfo.h"
++#include "llvm/IR/InstIterator.h"
++#include "llvm/IR/Instruction.h"
++#include "llvm/IR/IntrinsicInst.h"
++#include "llvm/Support/Debug.h"
++#include "llvm/Support/JSON.h"
++
++using namespace llvm;
++
++#define DEBUG_TYPE "program-complexity"
++
++AnalysisKey ProgramComplexity::Key;
++
++ProgramComplexity::Result ProgramComplexity::run(Module &M,
++                                                 ModuleAnalysisManager &AM) {
++
++  json::Object mJson;
++
++  json::Array functions;
++  for (Function &F : M) {
++    // Get required analysis
++    FunctionAnalysisManager &FAM =
++        AM.getResult<FunctionAnalysisManagerModuleProxy>(M).getManager();
++    ScalarEvolution &SE = FAM.getResult<ScalarEvolutionAnalysis>(F);
++    TargetTransformInfo &TTI = FAM.getResult<TargetIRAnalysis>(F);
++    auto &LI = FAM.getResult<LoopAnalysis>(F);
++
++    json::Object functionJson;
++    functionJson["name"] = F.getName();
++    functionJson["type"] = "function";
++
++    /*
++    dbgs() << "Classifying expressions for: ";
++    F.printAsOperand(dbgs(), false);
++    dbgs() << "\n";
++    for (Instruction &I : instructions(F)) {
++      if (I.getType()->isIntOrPtrTy() && !isa<CmpInst>(I)) {
++        dbgs() << I << '\n';
++        dbgs() << "  -->  ";
++        const SCEV *SV = SE.getSCEV(&I);
++        SV->print(dbgs());
++        if (!isa<SCEVCouldNotCompute>(SV)) {
++          dbgs() << " U: ";
++          SE.getUnsignedRange(SV).print(dbgs());
++          dbgs() << " S: ";
++          SE.getSignedRange(SV).print(dbgs());
++        }
++
++        const Loop *L = LI.getLoopFor(I.getParent());
++
++        const SCEV *AtUse = SE.getSCEVAtScope(SV, L);
++        if (AtUse != SV) {
++          dbgs() << "  -->  ";
++          AtUse->print(dbgs());
++          if (!isa<SCEVCouldNotCompute>(AtUse)) {
++            dbgs() << " U: ";
++            SE.getUnsignedRange(AtUse).print(dbgs());
++            dbgs() << " S: ";
++            SE.getSignedRange(AtUse).print(dbgs());
++          }
++        }
++
++        if (L) {
++          dbgs() << "\t\t" "Exits: ";
++          const SCEV *ExitValue = SE.getSCEVAtScope(SV, L->getParentLoop());
++          if (!SE.isLoopInvariant(ExitValue, L)) {
++            dbgs() << "<<Unknown>>";
++          } else {
++            dbgs() << *ExitValue;
++          }
++
++          bool First = true;
++          for (const auto *Iter = L; Iter; Iter = Iter->getParentLoop()) {
++            if (First) {
++              dbgs() << "\t\t" "LoopDispositions: { ";
++              First = false;
++            } else {
++              dbgs() << ", ";
++            }
++
++            Iter->getHeader()->printAsOperand(dbgs(), false);
++            dbgs() << ": " << SE.getLoopDisposition(SV, Iter);
++          }
++
++          for (const auto *InnerL : depth_first(L)) {
++            if (InnerL == L)
++              continue;
++            if (First) {
++              dbgs() << "\t\t" "LoopDispositions: { ";
++              First = false;
++            } else {
++              dbgs() << ", ";
++            }
++
++            InnerL->getHeader()->printAsOperand(dbgs(), false);
++            dbgs() << ": " << SE.getLoopDisposition(SV, InnerL);
++          }
++
++          dbgs() << " }";
++        }
++
++        dbgs() << "\n";
++      }
++    }
++    */
++
++    // Handle loops
++    json::Array loopsJsonArray;
++    for (Loop *loop : LI.getTopLevelLoops()) {
++      // iterating top loops
++      loopsJsonArray.push_back(std::move(handleLoop(*loop, SE, TTI)));
++    }
++    functionJson["loops"] = json::Value(std::move(loopsJsonArray));
++
++    // Handle free BBs
++    json::Array freeBBsJsonArray;
++    bool skip = false;
++    for (BasicBlock &BB : F) {
++      // Skip blocks belonging to a loop
++      for (Loop *L : LI) {
++        if (L->contains(&BB)) {
++          LLVM_DEBUG(dbgs() << "Ignoring bb: " << BB.getName()
++                 << ",as it is part of loop: " << L->getName() << "\n");
++          skip = true;
++        }
++      }
++      if (skip == true) {
++        skip = false;
++        continue;
++      }
++
++      // Handle blocks with branch
++      if (BB.getTerminator()->getNumSuccessors() > 1) {
++        // TODO: make a list of handled bbs, to not iterate them again ?
++      }
++
++      freeBBsJsonArray.push_back(std::move(handleBB(BB, TTI)));
++    }
++
++    functionJson["basic blocks"] = json::Value(std::move(freeBBsJsonArray));
++    functions.push_back(std::move(functionJson));
++  }
++
++  mJson["program"] = json::Value(std::move(functions));
++  return mJson;
++}
++
++json::Object ProgramComplexity::handleLoop(const Loop &L, ScalarEvolution &SE, TargetTransformInfo &TTI) {
++  StringRef loopName = L.getName();
++  dbgs() << "Handling loop: " << loopName << ", header: ";
++  L.getHeader()->printAsOperand(dbgs(), /*PrintType=*/false);
++  dbgs() << "\n";
++
++  json::Object loopJson;
++  loopJson["name"] = loopName;
++  loopJson["type"] = "loop";
++
++  if (!L.isInnermost()) {
++    // TODO: implement this
++    // handle subloops
++    for (Loop *subLoop : L.getSubLoops()) {
++      handleLoop(*subLoop, SE, TTI);
++    }
++  }
++
++  // determine num of loop iterations (also based on runtime variables)
++  // code taken from ScalarEvolution.cpp PrintLoopInfo
++  /*
++  SmallVector<BasicBlock *, 8> ExitingBlocks;
++  L.getExitingBlocks(ExitingBlocks);
++  if (ExitingBlocks.size() != 1)
++    dbgs() << "<multiple exits> ";
++  */
++
++  if (SE.hasLoopInvariantBackedgeTakenCount(&L)) {
++    const SCEV *backedgeTakenCount = SE.getBackedgeTakenCount(&L);
++    dbgs() << "backedge-taken count is " << *backedgeTakenCount << "\n";
++
++    std::string str;
++    raw_string_ostream output(str);
++    output << *backedgeTakenCount;
++    loopJson["iterations"] = str;
++  } else {
++    dbgs() << "backedge-taken count is undef\n";
++    loopJson["iterations"] = "Undef";
++  }
++
++  /*
++  if (ExitingBlocks.size() > 1)
++    for (BasicBlock *ExitingBlock : ExitingBlocks) {
++      dbgs() << "  exit count for " << ExitingBlock->getName() << ": "
++        << *SE.getExitCount(&L, ExitingBlock) << "\n";
++    }
++
++  dbgs() << "Loop ";
++  L.getHeader()->printAsOperand(dbgs(), PrintType=false);
++  dbgs() << ": ";
++
++  auto *ConstantBTC = SE.getConstantMaxBackedgeTakenCount(&L);
++  if (!isa<SCEVCouldNotCompute>(ConstantBTC)) {
++    dbgs() << "constant max backedge-taken count is " << *ConstantBTC;
++    if (SE.isBackedgeTakenCountMaxOrZero(&L))
++      dbgs() << ", actual taken count either this or zero.";
++  } else {
++    dbgs() << "Unpredictable constant max backedge-taken count. ";
++  }
++
++  dbgs() << "\n"
++        "Loop ";
++  L.getHeader()->printAsOperand(dbgs(), PrintType=false);
++  dbgs() << ": ";
++
++  auto *SymbolicBTC = SE.getSymbolicMaxBackedgeTakenCount(&L);
++  if (!isa<SCEVCouldNotCompute>(SymbolicBTC)) {
++    dbgs() << "symbolic max backedge-taken count is " << *SymbolicBTC;
++    if (SE.isBackedgeTakenCountMaxOrZero(&L))
++      dbgs() << ", actual taken count either this or zero.";
++  } else {
++    dbgs() << "Unpredictable symbolic max backedge-taken count. ";
++  }
++  dbgs() << "\n";
++  */
++
++  // Go through basic blocks in loop
++  json::Array loopBasicBlockJsonArray;
++  dbgs() << "Handling BBs in loop: " << loopName;
++  for (BasicBlock *BB : L.getBlocks()) {
++    loopBasicBlockJsonArray.push_back(std::move(handleBB(*BB, TTI)));
++  }
++  loopJson["basic blocks"] = std::move(loopBasicBlockJsonArray);
++
++  return loopJson;
++}
++
++
++json::Object ProgramComplexity::handleBranchBB(BasicBlock &BB, TargetTransformInfo &TTI) {
++  StringRef bbName = BB.getName();
++  dbgs() << "Handling branch BB: " << bbName;
++
++  json::Object bbJson;
++  bbJson["name"] = bbName;
++
++
++
++  return bbJson;
++}
++
++
++json::Object ProgramComplexity::handleBB(BasicBlock &BB, TargetTransformInfo &TTI) {
++  StringRef bbName = BB.getName();
++  dbgs() << "Handling BB: " << bbName;
++
++  json::Object bbJson;
++  bbJson["name"] = bbName;
++
++  // TODO: Maybe to optimize code it is possible to check for InstructionCost
++  // validity (.IsValid()), when getting single values and stopping BB
++  // evaluation on invalid cost
++
++  InstructionCost totalCost;
++
++  for (Instruction &Inst : BB) {
++    // TODO: Use a pass parameter instead of cl::opt CostKind to determine
++    // which cost kind to print.
++    InstructionCost Cost;
++    auto *II = dyn_cast<IntrinsicInst>(&Inst);
++    if (II /*&& TypeBasedIntrinsicCost*/) { // TODO: handle this option?
++                                            // Example:
++                                            // CostModelPrinterPass::run(
++      IntrinsicCostAttributes ICA(II->getIntrinsicID(), *II,
++                                  InstructionCost::getInvalid(), true);
++      Cost = TTI.getIntrinsicInstrCost(ICA, TargetCostKind);
++    } else {
++      Cost = TTI.getInstructionCost(&Inst, TargetCostKind);
++    }
++
++    totalCost += Cost;
++
++    dbgs() << "Estimated cost of inst: " << Inst.getName() << " is: ";
++    if (auto CostVal = Cost.getValue())
++      dbgs() << *CostVal;
++    else
++      dbgs() << "Undef";
++    dbgs() << "\n";
++  }
++
++  if (std::optional<InstructionCost::CostType> CostVal = totalCost.getValue()) {
++    bbJson["cost"] = std::move(*CostVal); //*CostVal;
++  } else {
++    bbJson["cost"] = "Undef";
++  }
++
++  return bbJson;
++}
++
++PreservedAnalyses ProgramComplexityPrinterPass::run(Module &M,
++                                                    ModuleAnalysisManager &AM) {
++  json::Object result = AM.getResult<ProgramComplexity>(M);
++
++  json::OStream JOS(OS, /*PrettyPrint*/ 2);
++  JOS.value(std::move(result));
++  OS << '\n';
++  return PreservedAnalyses::all();
++}
+diff --git a/llvm/lib/Passes/PassBuilder.cpp b/llvm/lib/Passes/PassBuilder.cpp
+index fde759026e5d..3016d7f2ebeb 100644
+--- a/llvm/lib/Passes/PassBuilder.cpp
++++ b/llvm/lib/Passes/PassBuilder.cpp
+@@ -61,6 +61,7 @@
+ #include "llvm/Analysis/PhiValues.h"
+ #include "llvm/Analysis/PostDominators.h"
+ #include "llvm/Analysis/ProfileSummaryInfo.h"
++#include "llvm/Analysis/ProgramComplexity.h"
+ #include "llvm/Analysis/RegionInfo.h"
+ #include "ll
\ No newline at end of file
